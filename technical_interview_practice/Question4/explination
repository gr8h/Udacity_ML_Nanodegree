Question 4
Find the least common ancestor between two nodes on a binary search tree.
The least common ancestor is the farthest node from the root that is an ancestor of both nodes.
For example, the root is a common ancestor of all nodes on the tree, but if both nodes are descendents
of the root's left child, then that left child might be the lowest common ancestor. You can assume that both nodes are
in the tree, and the tree itself adheres to all BST properties.
The function definition should look like question4(T, r, n1, n2),
where T is the tree represented as a matrix,
where the index of the list is equal to the integer stored in that node and a 1 represents a child node,
r is a non-negative integer representing the root,
and n1 and n2 are non-negative integers representing the two nodes in no particular order.
For example, one test case might be

Solution:
- Given that the tree is BST then we know that the left is smaller than it's parent and the right node is larger than it's parent.
- Start form the root node, check if the parent node value is greater than both child node values
- Then the LCA must be on the left
- Else check if the parent node is smaller than both children nodes on both sides
- Then the LCA must be in the right
- Otherwise this node is the LCA

Complexity:
- Time: O(H) ==> where h is the height of the BST
- Space: O(N)

Validation:
- T is empty or None
- r or n1 or n2 is None
- r or n1 or n2 is larger than the T size


Test cases:
T = [[0, 1, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0],
     [1, 0, 0, 0, 1],
     [0, 0, 0, 0, 0]]
Return # 3

T = [[0, 1, 0, 0],
     [0, 0, 1, 0],
     [0, 0, 0, 1],
     [0, 0, 0, 0]]
Return # 1

T = [[0, 1, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0],
     [1, 0, 0, 1, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0]]
Return  # 5